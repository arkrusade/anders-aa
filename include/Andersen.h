#ifndef ANDERSEN_H
#define ANDERSEN_H

#include "Constraint.h"
#include "NodeFactory.h"
#include "PtsSet.h"

#include "llvm/ADT/DenseMap.h"
#include "llvm/IR/CallSite.h"
#include "llvm/IR/DataLayout.h"

#include <vector>

class Andersen
{
private:
  // A factory object that knows how to manage AndersNodes
  AndersNodeFactory nodeFactory;

  // Constraints - This vector contains a list of all of the constraints
  // identified by the program.
  std::vector<AndersConstraint> constraints;

  // This is the points-to graph generated by the analysis
  std::map<NodeIndex, AndersPtsSet> ptsGraph;

  void collectConstraints(const llvm::Module &);
  void solveConstraints();

  // Helper functions for constraint collection
  void collectConstraintsForInstruction(const llvm::Instruction *);
  void addConstraintForCall(llvm::ImmutableCallSite cs);
  void addArgumentConstraintForCall(llvm::ImmutableCallSite cs,
                                    const llvm::Function *f);

  // Helper functions for constraint optimization
  NodeIndex getRefNodeIndex(NodeIndex n) const;
  NodeIndex getAdrNodeIndex(NodeIndex n) const;

  // For debugging
  void dumpConstraint(const AndersConstraint &) const;
  void dumpConstraints() const;
  void dumpConstraintsPlainVanilla() const;
  void dumpPtsGraphPlainVanilla() const;

public:
  static char ID;

  Andersen(const llvm::Module &);
  bool runOnModule(const llvm::Module &M);

  // Given a llvm pointer v,
  // - Return false if the analysis doesn't know where v points to. In other
  // words, the client must conservatively assume v can points to everything.
  // - Return true otherwise, and the points-to set of v is put into the second
  // argument.
  bool getPointsToSet(const llvm::Value *v,
                      std::vector<const llvm::Value *> &ptsSet) const;
  // Put all allocation sites (i.e. all memory objects identified by the
  // analysis) into the first arugment
  void
  getAllAllocationSites(std::vector<const llvm::Value *> &allocSites) const;

  friend class AndersenAAResult;
};

#endif
